{"version":3,"sources":["components/table/table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","headerList","map","header","usersList","users","user","scope","id","firstName","lastName","email","phone","class","App","className","address","streetAddress","city","state","zip","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAgCeA,G,KA7BD,SAACC,GACb,IAEMC,EAFU,CAAC,KAAM,YAAa,WAAY,QAAS,SAE9BC,KAAI,SAACC,GAAD,OAAY,4BAAKA,MAI1CC,EAAYJ,EAAMK,MAAMH,KAAI,SAACI,GAAD,OAC9B,4BACI,wBAAIC,MAAM,OAAOD,EAAKE,IACtB,4BAAKF,EAAKG,WACV,4BAAKH,EAAKI,UACV,4BAAKJ,EAAKK,OACV,4BAAKL,EAAKM,WAIlB,OACE,yBAAKC,MAAM,oBACT,2BAAOA,MAAM,qBACX,+BACE,4BAAKZ,IAEP,+BAAQG,OC6CDU,MApEf,WA4DE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAOV,MA7DG,CACZ,CACEG,GAAI,IACJC,UAAW,MACXC,SAAU,SACVC,MAAO,kBACPC,MAAO,gBACPI,QAAS,CACPC,cAAe,iBACfC,KAAM,WACNC,MAAO,KACPC,IAAK,SAEPC,YAAa,2BAEf,CACEb,GAAI,IACJC,UAAW,MACXC,SAAU,SACVC,MAAO,kBACPC,MAAO,gBACPI,QAAS,CACPC,cAAe,iBACfC,KAAM,WACNC,MAAO,KACPC,IAAK,SAEPC,YAAa,2BAEf,CACEb,GAAI,IACJC,UAAW,MACXC,SAAU,SACVC,MAAO,kBACPC,MAAO,gBACPI,QAAS,CACPC,cAAe,iBACfC,KAAM,WACNC,MAAO,KACPC,IAAK,SAEPC,YAAa,2BAEf,CACEb,GAAI,IACJC,UAAW,MACXC,SAAU,SACVC,MAAO,kBACPC,MAAO,gBACPI,QAAS,CACPC,cAAe,iBACfC,KAAM,WACNC,MAAO,KACPC,IAAK,SAEPC,YAAa,gCC/CCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,KCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.10f52133.chunk.js","sourcesContent":["import React from \"react\"\n//import classes from \"./template.module.scss\"\n\nconst Table = (props) => {\n  const headers = [\"ID\", \"firstName\", \"lastname\", \"email\", \"phone\"]\n\n  const headerList = headers.map((header) => <th>{header}</th>)\n\n  \n\n  const usersList = props.users.map((user) => (\n      <tr>\n          <th scope=\"row\">{user.id}</th>\n          <td>{user.firstName}</td>\n          <td>{user.lastName}</td>\n          <td>{user.email}</td>\n          <td>{user.phone}</td>\n      </tr>\n  ))\n\n  return (\n    <div class=\"table-responsive\">\n      <table class=\"table table-hover\">\n        <thead>\n          <tr>{headerList}</tr>\n        </thead>\n        <tbody>{usersList}</tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Table\n","import React from 'react';\nimport Table from './components/table/table'\n\nfunction App() {\n  const users = [\n    {\n      id: 101,\n      firstName: \"Sue\",\n      lastName: \"Corson\",\n      email: \"DWhalley@in.gov\",\n      phone: \"(612)211-6296\",\n      address: {\n        streetAddress: \"9792 Mattis Ct\",\n        city: \"Waukesha\",\n        state: \"WI\",\n        zip: \"22178\",\n      },\n      description: \"et lacus magna dolor...\",\n    },\n    {\n      id: 102,\n      firstName: \"Sue\",\n      lastName: \"Corson\",\n      email: \"DWhalley@in.gov\",\n      phone: \"(612)211-6296\",\n      address: {\n        streetAddress: \"9792 Mattis Ct\",\n        city: \"Waukesha\",\n        state: \"WI\",\n        zip: \"22178\",\n      },\n      description: \"et lacus magna dolor...\",\n    },\n    {\n      id: 103,\n      firstName: \"Sue\",\n      lastName: \"Corson\",\n      email: \"DWhalley@in.gov\",\n      phone: \"(612)211-6296\",\n      address: {\n        streetAddress: \"9792 Mattis Ct\",\n        city: \"Waukesha\",\n        state: \"WI\",\n        zip: \"22178\",\n      },\n      description: \"et lacus magna dolor...\",\n    },\n    {\n      id: 104,\n      firstName: \"Sue\",\n      lastName: \"Corson\",\n      email: \"DWhalley@in.gov\",\n      phone: \"(612)211-6296\",\n      address: {\n        streetAddress: \"9792 Mattis Ct\",\n        city: \"Waukesha\",\n        state: \"WI\",\n        zip: \"22178\",\n      },\n      description: \"et lacus magna dolor...\",\n    },\n  ]\n\n  return (\n    <div className=\"App\">\n      <Table users={users}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}