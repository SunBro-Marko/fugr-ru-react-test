{"version":3,"sources":["components/table/tableSearch.js","components/table/table.js","components/table/DataSelected.js","App.js","serviceWorker.js","index.js"],"names":["TableSearch","props","className","type","placeholder","aria-label","aria-describedby","Table","headerList","map","header","onClick","sortHandler","bind","sortField","sortDirection","usersList","this","users","user","key","id","firstName","scope","lastName","email","phone","React","Component","selectionData","App","state","isDataSelected","isLoading","isShowForm","data","search","selectionRow","currentPage","field","clonedData","concat","sortType","orderedData","sort","a","b","setState","reverse","url","fetchData","fetch","response","json","_","orderBy","selectionHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAkBeA,EAfK,SAACC,GAEnB,OACE,yBAAKC,UAAU,oBACT,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,oRACZC,aAAW,uBACXC,mBAAiB,oBC8BdC,E,uKAlCH,IAAD,OAGDC,EAFU,CAAC,KAAM,YAAa,WAAY,QAAS,SAE9BC,KAAI,SAACC,GAAD,OAC7B,wBAAIC,QAAS,EAAKV,MAAMW,YAAYC,KAAK,KAAMH,IAC5CA,EAAQ,IACR,EAAKT,MAAMa,YAAcJ,EAAS,+BAAQ,EAAKT,MAAMc,eAAyB,OAI7EC,EAAYC,KAAKhB,MAAMiB,MAAMT,KAAI,SAACU,GAAD,OACrC,wBAAIC,IAAKD,EAAKE,GAAKF,EAAKG,WACtB,wBAAIC,MAAM,OAAOJ,EAAKE,IACtB,4BAAKF,EAAKG,WACV,4BAAKH,EAAKK,UACV,4BAAKL,EAAKM,OACV,4BAAKN,EAAKO,WAId,OACE,yBAAKxB,UAAU,oBACb,kBAAC,EAAD,MACA,2BAAOA,UAAU,qBACf,+BACE,4BAAKM,IAEP,+BAAQQ,S,GA9BEW,IAAMC,WCFX,G,MAAA,SAAC3B,GAKZ,OACI,yBAAKC,UAAU,QACX,4BAAQA,UAAU,kBAAkBS,QAAS,kBAAMV,EAAM4B,cALlD,2LAKP,8HACA,4BAAQ3B,UAAU,kBAAkBS,QAAS,kBAAMV,EAAM4B,cALtD,qMAKH,qH,gBCiEGC,E,4MAtEbC,MAAQ,CACNC,gBAAgB,EAChBC,WAAW,EACXC,YAAY,EACZC,KAAM,GACNC,OAAQ,GACRrB,cAAe,MACfD,UAAW,KACXuB,aAAc,KACdC,YAAa,G,EAcf1B,YAAc,SAAC2B,GACb,IAAMC,EAAa,EAAKT,MAAMI,KAAKM,SAC7BC,EAAwC,QAA7B,EAAKX,MAAMhB,cAA0B,OAAS,MAEzD4B,EAAcH,EAAWI,MAAK,SAAUC,EAAGC,GAC/C,OAAID,EAAEN,GAASO,EAAEP,GACR,EAELM,EAAEN,GAASO,EAAEP,IACP,EAGH,KAGT,EAAKQ,SAAS,CACZZ,KAAiC,QAA3B,EAAKJ,MAAMhB,cAAwB4B,EAAYA,EAAYK,UACjEjC,cAAe2B,EACf5B,UAAWyB,K,EAIfV,cAAgB,SAACoB,GACf,EAAKF,SAAS,CACZf,gBAAgB,EAChBC,WAAW,IAGb,EAAKiB,UAAUD,I,iGAvCDA,G,yFACSE,MAAMF,G,cAAvBG,E,gBACaA,EAASC,O,OAAtBlB,E,OAENlB,KAAK8B,SAAS,CACZd,WAAW,EAEXE,KAAMmB,IAAEC,QAAQpB,EAAMlB,KAAKc,MAAMjB,UAAWG,KAAKc,MAAMhB,iB,sIAoCzD,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAc2B,cAAeZ,KAAKY,gBAClC,kBAAC,EAAD,CACEX,MAAOD,KAAKc,MAAMI,KAClBvB,YAAaK,KAAKL,YAClBG,cAAeE,KAAKc,MAAMhB,cAC1BD,UAAWG,KAAKc,MAAMjB,UACtB0C,iBAAkBvC,KAAKuC,wB,GAhEf5B,aCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f43cd4f3.chunk.js","sourcesContent":["import React from \"react\"\n//import classes from \"./template.module.scss\"\n\nconst TableSearch = (props) => {\n\n  return (\n    <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Для поиска введите любую информацию о пользователе...\"\n            aria-label=\"Recipient's username\"\n            aria-describedby=\"button-addon2\"\n          />\n    </div>\n  )\n}\n\nexport default TableSearch","import React from \"react\";\nimport TableSearch from \"./tableSearch\";\n\n//import classes from \"./template.module.scss\"\n\nclass Table extends React.Component {\n  \n\n  render() {\n    const headers = [\"id\", \"firstName\", \"lastName\", \"email\", \"phone\"];\n\n    const headerList = headers.map((header) => (\n      <th onClick={this.props.sortHandler.bind(null, header)}>\n        {header}{\" \"}\n        {this.props.sortField === header ? <small>{this.props.sortDirection}</small> : \"\"}\n      </th>\n    ));\n\n    const usersList = this.props.users.map((user) => (\n      <tr key={user.id + user.firstName}>\n        <th scope=\"row\">{user.id}</th>\n        <td>{user.firstName}</td>\n        <td>{user.lastName}</td>\n        <td>{user.email}</td>\n        <td>{user.phone}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"table-responsive\">\n        <TableSearch />\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>{headerList}</tr>\n          </thead>\n          <tbody>{usersList}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from 'react';\nimport './DataSelected.css';\n\nexport default (props) => {\n\n    const smallData = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`,\n        bigData = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\n\n    return (\n        <div className=\"flex\">\n            <button className=\"btn btn-success\" onClick={() => props.selectionData(smallData)}>Маленький объем данных</button>\n            <button className=\"btn btn-warning\" onClick={() => props.selectionData(bigData)}>Большой объем данных</button>\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport Table from \"./components/table/table\";\nimport DataSelected from \"./components/table/DataSelected\";\nimport _ from \"lodash\";\n\nclass App extends Component {\n  state = {\n    isDataSelected: false,\n    isLoading: false,\n    isShowForm: false,\n    data: [],\n    search: \"\",\n    sortDirection: \"asc\", // or desc\n    sortField: \"ID\",\n    selectionRow: null,\n    currentPage: 0,\n  };\n\n  async fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    this.setState({\n      isLoading: false,\n\n      data: _.orderBy(data, this.state.sortField, this.state.sortDirection),\n    });\n  }\n\n  sortHandler = (field) => {\n    const clonedData = this.state.data.concat();\n    const sortType = this.state.sortDirection === \"asc\" ? \"desc\" : \"asc\";\n\n    const orderedData = clonedData.sort(function (a, b) {\n      if (a[field] > b[field]) {\n        return 1;\n      }\n      if (a[field] < b[field]) {\n        return -1;\n      }\n      // a должно быть равным b\n      return 0;\n    });\n\n    this.setState({\n      data: this.state.sortDirection===\"asc\" ? orderedData:orderedData.reverse(),\n      sortDirection: sortType,\n      sortField: field,\n    });\n  };\n\n  selectionData = (url) => {\n    this.setState({\n      isDataSelected: true,\n      isLoading: true,\n    });\n\n    this.fetchData(url);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DataSelected selectionData={this.selectionData} />\n        <Table\n          users={this.state.data}\n          sortHandler={this.sortHandler}\n          sortDirection={this.state.sortDirection}\n          sortField={this.state.sortField}\n          selectionHandler={this.selectionHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}